// Script para testar o fluxo completo do formul√°rio
export const testFormFlow = () => {
  console.log('=== TESTE DO FLUXO COMPLETO DO FORMUL√ÅRIO ===');
  console.log('');
  
  console.log('Como testar o fluxo completo:');
  console.log('');
  
  console.log('1. PREENCHER FORMUL√ÅRIO:');
  console.log('   - Acesse o formul√°rio (Comply e-DOCS ou Comply Fiscal)');
  console.log('   - Preencha todos os campos obrigat√≥rios no Step 1');
  console.log('   - Clique em "Avan√ßar" para ir ao Step 2');
  console.log('   - Preencha todos os campos obrigat√≥rios no Step 2');
  console.log('   - Clique em "Gerar Or√ßamento"');
  console.log('');
  
  console.log('2. VERIFICAR PROCESSAMENTO:');
  console.log('   ‚úÖ Deve mostrar "Processando..." no bot√£o');
  console.log('   ‚úÖ Deve aparecer toast "Or√ßamento Enviado"');
  console.log('   ‚úÖ Deve aguardar 2 segundos');
  console.log('   ‚úÖ Deve limpar o formul√°rio automaticamente');
  console.log('   ‚úÖ Deve voltar para o Step 1');
  console.log('');
  
  console.log('3. VERIFICAR NO PAINEL DE APROVA√á√ïES:');
  console.log('   ‚úÖ Deve aparecer APENAS UM card de aprova√ß√£o');
  console.log('   ‚úÖ N√£o deve haver duplicatas');
  console.log('');
  
  console.log('4. VERIFICAR E-MAIL:');
  console.log('   ‚úÖ Deve receber APENAS UM e-mail');
  console.log('   ‚úÖ Assunto deve ser "Or√ßamento Comply - NOME_EMPRESA"');
  console.log('   ‚úÖ N√£o deve ter duplica√ß√£o no assunto');
  console.log('');
  
  console.log('5. TESTE DE DUPLO CLIQUE:');
  console.log('   - Preencha o formul√°rio novamente');
  console.log('   - Clique rapidamente v√°rias vezes no bot√£o "Gerar Or√ßamento"');
  console.log('   ‚úÖ Deve processar apenas uma vez');
  console.log('   ‚úÖ Pode aparecer toast "Aguarde alguns segundos"');
  console.log('   ‚úÖ Deve aparecer apenas um card no painel');
  console.log('');
  
  console.log('6. LOGS IMPORTANTES PARA OBSERVAR:');
  console.log('   - "üîí Submiss√£o marcada como processada: [ID]"');
  console.log('   - "Or√ßamento inserido com sucesso: [ID]"');
  console.log('   - "Formul√°rio completo e or√ßamento enviado"');
  console.log('   - "Limpando formul√°rio e voltando ao in√≠cio..."');
  console.log('');
  
  console.log('7. PROBLEMAS QUE N√ÉO DEVEM MAIS OCORRER:');
  console.log('   ‚ùå Dois cards de aprova√ß√£o');
  console.log('   ‚ùå E-mails duplicados');
  console.log('   ‚ùå Assunto "Seu or√ßamento - Seu Or√ßamento"');
  console.log('   ‚ùå Formul√°rio n√£o limpar ap√≥s envio');
  console.log('   ‚ùå N√£o voltar para Step 1');
  console.log('');
  
  console.log('8. FERRAMENTAS DE DEBUG:');
  console.log('   - submissionIdempotency.getStats() - Ver submiss√µes processadas');
  console.log('   - submissionLock.getStatus() - Ver locks ativos');
  console.log('   - debugEmailTemplates() - Verificar templates');
  console.log('');
};

export const checkFormState = () => {
  console.log('=== VERIFICA√á√ÉO DO ESTADO DO FORMUL√ÅRIO ===');
  
  // Verificar se h√° elementos do formul√°rio na p√°gina
  const step1Elements = document.querySelectorAll('[data-step="1"]');
  const step2Elements = document.querySelectorAll('[data-step="2"]');
  const submitButtons = document.querySelectorAll('button[type="submit"]');
  const formInputs = document.querySelectorAll('input, select, textarea');
  
  console.log('Elementos encontrados na p√°gina:');
  console.log(`- Elementos Step 1: ${step1Elements.length}`);
  console.log(`- Elementos Step 2: ${step2Elements.length}`);
  console.log(`- Bot√µes de submit: ${submitButtons.length}`);
  console.log(`- Campos de formul√°rio: ${formInputs.length}`);
  
  // Verificar se h√° campos preenchidos
  let filledFields = 0;
  formInputs.forEach(input => {
    if (input instanceof HTMLInputElement || input instanceof HTMLSelectElement || input instanceof HTMLTextAreaElement) {
      if (input.value && input.value.trim() !== '') {
        filledFields++;
      }
    }
  });
  
  console.log(`- Campos preenchidos: ${filledFields}`);
  
  // Verificar estado dos bot√µes
  submitButtons.forEach((button, index) => {
    if (button instanceof HTMLButtonElement) {
      console.log(`- Bot√£o ${index + 1}: ${button.disabled ? 'DESABILITADO' : 'HABILITADO'} - "${button.textContent?.trim()}"`);
    }
  });
  
  // Verificar indicador de step
  const stepIndicators = document.querySelectorAll('[class*="step"], [class*="Step"]');
  console.log(`- Indicadores de step: ${stepIndicators.length}`);
  
  return {
    step1Elements: step1Elements.length,
    step2Elements: step2Elements.length,
    submitButtons: submitButtons.length,
    formInputs: formInputs.length,
    filledFields,
    hasActiveSubmit: Array.from(submitButtons).some(btn => !btn.disabled)
  };
};

export const simulateFormCompletion = () => {
  console.log('=== SIMULA√á√ÉO DE CONCLUS√ÉO DO FORMUL√ÅRIO ===');
  
  // Simular dados de um formul√°rio preenchido
  const mockFormData = {
    // Step 1
    razaoSocial: 'EMPRESA TESTE SIMULA√á√ÉO LTDA',
    cnpj: '12.345.678/0001-95',
    municipio: 'S√£o Paulo',
    uf: 'SP',
    responsavel: 'Jo√£o da Silva',
    email: 'joao@empresateste.com',
    
    // Step 2
    segmento: 'Tecnologia',
    modalidade: 'saas',
    volumetriaNotas: 'ate-20000',
    prazoContratacao: 24,
    
    // Controle
    step: 2,
    completed: false
  };
  
  console.log('Dados simulados do formul√°rio:');
  console.log(JSON.stringify(mockFormData, null, 2));
  
  console.log('\nFluxo esperado ap√≥s submiss√£o:');
  console.log('1. Gerar ID de idempot√™ncia');
  console.log('2. Verificar se j√° foi processado');
  console.log('3. Marcar como processado');
  console.log('4. Adquirir lock');
  console.log('5. Verificar duplicatas no banco');
  console.log('6. Inserir no banco');
  console.log('7. Criar notifica√ß√£o');
  console.log('8. Enviar e-mail (se configurado)');
  console.log('9. Liberar lock');
  console.log('10. Mostrar toast de sucesso');
  console.log('11. Aguardar 2 segundos');
  console.log('12. Limpar formul√°rio');
  console.log('13. Voltar para Step 1');
  
  return mockFormData;
};

// Disponibilizar fun√ß√µes globalmente
if (typeof window !== 'undefined') {
  (window as any).testFormFlow = testFormFlow;
  (window as any).checkFormState = checkFormState;
  (window as any).simulateFormCompletion = simulateFormCompletion;
  
  console.log('üîß Fun√ß√µes de teste do fluxo do formul√°rio dispon√≠veis:');
  console.log('- testFormFlow() - Instru√ß√µes de teste completo');
  console.log('- checkFormState() - Verificar estado atual do formul√°rio');
  console.log('- simulateFormCompletion() - Simular conclus√£o do formul√°rio');
}